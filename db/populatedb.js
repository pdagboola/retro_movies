const pool = require("./pool");

class Populatedb {
  async createTable() {
    try {
      await pool.query(`DROP TABLE IF EXISTS movie_genre`);
      await pool.query(`DROP TABLE IF EXISTS korean_genre`);
      await pool.query(`DROP TABLE IF EXISTS tvseries_genre`);
      await pool.query(`DROP TABLE IF EXISTS genre`);
      await pool.query(`DROP TABLE IF EXISTS tvseries`);
      await pool.query(`DROP TABLE IF EXISTS korean`);
      await pool.query(`DROP TABLE IF EXISTS movies`);
      console.log("tables dropped");
      await pool.query(`CREATE TABLE IF NOT EXISTS movies(
      id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      name VARCHAR(255),
      year INT,
      rating FLOAT, 
      img_url VARCHAR(255)
      );`);
      console.log("movies table created");
      await pool.query(`CREATE TABLE IF NOT EXISTS korean(
      id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      name VARCHAR(255),
      year VARCHAR(255),
      rating FLOAT, 
      img_url VARCHAR(255)
      );`);

      await pool.query(`CREATE TABLE IF NOT EXISTS tvseries(
      id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      name VARCHAR(255),
      year VARCHAR(255),
      rating FLOAT, 
      img_url VARCHAR(255)
      );`);

      await pool.query(`CREATE TABLE IF NOT EXISTS genre(
      id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      name VARCHAR(255),
      genre_img_url VARCHAR(255)
      );`);

      // await pool.query(` CREATE TABLE IF NOT EXISTS actor(
      // id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      // name VARCHAR(255)
      // );`);

      await pool.query(`CREATE TABLE IF NOT EXISTS movie_genre(
      movie_id INT REFERENCES movies(id) ON DELETE CASCADE,
      genre_id INT REFERENCES genre(id) ON DELETE CASCADE,
      PRIMARY KEY(movie_id, genre_id)
          
      );`);

      await pool.query(`CREATE TABLE IF NOT EXISTS korean_genre(
      korean_id INT REFERENCES korean(id) ON DELETE CASCADE,
      genre_id INT REFERENCES genre(id) ON DELETE CASCADE,
      PRIMARY KEY(korean_id, genre_id)
          
      );`);

      await pool.query(`CREATE TABLE IF NOT EXISTS tvseries_genre(
      tvseries_id INT REFERENCES tvseries(id) ON DELETE CASCADE,
      genre_id INT REFERENCES genre(id) ON DELETE CASCADE,
      PRIMARY KEY(tvseries_id, genre_id)
          
      );`);
    } catch (err) {
      throw err;
    }
  }

  async insertValues() {
    await pool.query(`INSERT INTO movies(name, year, rating, img_url)
    VALUES 
    ('The Godfather', 1972, 9.2, 'https://image.tmdb.org/t/godfather_poster'),
    ('Star Wars: Episode IV', 1977, 8.6, 'https://image.tmdb.org/t/star_wars_poster'),
    ('Back to the Future', 1985, 8.5, 'https://image.tmdb.org/t/back_future_poster'),
    ('Raiders of the Lost Ark', 1981, 8.4, 'https://image.tmdb.org/t/raiders_poster'),
    ('Pulp Fiction', 1994, 8.9, 'https://image.tmdb.org/t/pulp_fiction_poster'),
    ('E.T. the Extra-Terrestrial', 1982, 7.9, 'https://image.tmdb.org/t/et_poster'),
    ('Ghostbusters', 1984, 7.8, 'https://image.tmdb.org/t/ghostbusters_poster'),
    ('The Terminator', 1984, 8.1, 'https://image.tmdb.org/t/terminator_poster'),
    ('Jurassic Park', 1993, 8.2, 'https://image.tmdb.org/t/jurassic_park_poster'),
    ('The Breakfast Club', 1985, 7.8, 'https://image.tmdb.org/t/breakfast_club_poster'),
    ('Blade Runner', 1982, 8.1, 'https://image.tmdb.org/t/blade_runner_poster'),
    ('Rocky', 1976, 8.1, 'https://image.tmdb.org/t/rocky_poster'),
    ('Die Hard', 1988, 8.2, 'https://image.tmdb.org/t/die_hard_poster'),
    ('The Shining', 1980, 8.4, 'https://image.tmdb.org/t/shining_poster'),
    ('Goodfellas', 1990, 8.7, 'https://image.tmdb.org/t/goodfellas_poster');
        
        ;`);

    await pool.query(`INSERT INTO genre (name, genre_img_url) 
    VALUES
    ('Crime', 'https://image.tmdb.org/t/crime_genre'),
    ('Drama', 'https://image.tmdb.org/t/drama_genre'),
    ('Sci-Fi', 'https://image.tmdb.org/t/scifi_genre'),
    ('Adventure', 'https://image.tmdb.org/t/adventure_genre'),
    ('Comedy', 'https://image.tmdb.org/t/comedy_genre'),
    ('Fantasy', 'https://image.tmdb.org/t/fantasy_genre'),
    ('Thriller', 'https://image.tmdb.org/t/thriller_genre'),
    ('Biography', 'https://image.tmdb.org/t/biography_genre'),
    ('Action', 'https://image.tmdb.org/t/action_genre'),
    ('Horror', 'https://image.tmdb.org/t/horror_genre'),
    ('Sport', 'https://image.tmdb.org/t/sport_genre');

      
    `);

    await pool.query(`INSERT INTO tvseries (name, year, rating, img_url) 
    VALUES
    ('M*A*S*H', 1972, 8.4, 'https://image.tmdb.org/t/mash_poster'),
    ('The Twilight Zone', 1959, 9.0, 'https://image.tmdb.org/t/twilight_zone_poster'),
    ('Cheers', 1982, 8.0, 'https://image.tmdb.org/t/cheers_poster'),
    ('The X-Files', 1993, 8.6, 'https://image.tmdb.org/t/xfiles_poster'),
    ('Seinfeld', 1989, 8.9, 'https://image.tmdb.org/t/seinfeld_poster'),
    ('Star Trek: The Next Generation', 1987, 8.7, 'https://image.tmdb.org/t/startrek_tng_poster'),
    ('The Fresh Prince of Bel-Air', 1990, 7.9, 'https://image.tmdb.org/t/fresh_prince_poster'),
    ('Knight Rider', 1982, 6.9, 'https://image.tmdb.org/t/knight_rider_poster'),
    ('The Wonder Years', 1988, 8.4, 'https://image.tmdb.org/t/wonder_years_poster'),
    ('Miami Vice', 1984, 7.5, 'https://image.tmdb.org/t/miami_vice_poster'),
    ('Friends', 1994, 8.9, 'https://image.tmdb.org/t/friends_poster'),
    ('Twin Peaks', 1990, 8.8, 'https://image.tmdb.org/t/twin_peaks_poster'),
    ('MacGyver', 1985, 7.7, 'https://image.tmdb.org/t/macgyver_poster'),
    ('Buffy the Vampire Slayer', 1997, 8.3, 'https://image.tmdb.org/t/buffy_poster'),
    ('The Simpsons', 1989, 8.7, 'https://image.tmdb.org/t/simpsons_poster');
    `);

    await pool.query(`INSERT INTO korean (name, year, rating, img_url) 
    VALUES
    ('The Housemaid', 1960, 7.5, 'https://image.tmdb.org/t/housemaid_1960_poster'),
    ('The Surrogate Woman', 1987, 7.2, 'https://image.tmdb.org/t/surrogate_woman_poster'),
    ('Mandala', 1981, 7.5, 'https://image.tmdb.org/t/mandala_poster'),
    ('The Road to Sampo', 1975, 7.1, 'https://image.tmdb.org/t/road_to_sampo_poster'),
    ('Aimless Bullet', 1961, 7.9, 'https://image.tmdb.org/t/aimless_bullet_poster'),
    ('Declaration of Idiot', 1984, 7.0, 'https://image.tmdb.org/t/declaration_idiot_poster'),
    ('Why Has Bodhi-Dharma Left for the East?', 1989, 7.3, 'https://image.tmdb.org/t/bodhi_dharma_poster'),
    ('Chil-su and Man-su', 1988, 7.6, 'https://image.tmdb.org/t/chilsu_mansu_poster'),
    ('Gilsotteum', 1985, 7.4, 'https://image.tmdb.org/t/gilsotteum_poster'),
    ('Peppermint Candy', 1999, 7.7, 'https://image.tmdb.org/t/peppermint_candy_poster'),
    ('A Day Off', 1968, 7.8, 'https://image.tmdb.org/t/a_day_off_poster'),
    ('The Ball Shot by a Midget', 1981, 7.3, 'https://image.tmdb.org/t/ball_midget_poster'),
    ('Spring in My Hometown', 1998, 7.0, 'https://image.tmdb.org/t/spring_hometown_poster'),
    ('Black Republic', 1990, 7.5, 'https://image.tmdb.org/t/black_republic_poster'),
    ('Sopyonje', 1993, 7.7, 'https://image.tmdb.org/t/sopyonje_poster');
    `);

    await pool.query(`INSERT INTO movie_genre (movie_id, genre_id) 
    VALUES
    (1, 1),
    (1, 2),
    (2, 3),
    (3, 3),
    (3, 5),
    (4, 4),
    (5, 1),
    (5, 2),
    (6, 3),
    (7, 5),
    (8, 3),
    (9, 3),
    (10, 5),
    (11, 3),
    (12, 2),
    (13, 9),
    (14, 10),
    (15, 1);
    `);

    await pool.query(`INSERT INTO korean_genre (korean_id, genre_id) 
    VALUES
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 1),
    (6, 2),
    (7, 1),
    (8, 1),
    (9, 4),
    (10, 2),
    (11, 1),
    (12, 1),
    (13, 2),
    (14, 1),
    (15, 4);
    `);

    await pool.query(`INSERT INTO tvseries_genre (tvseries_id, genre_id) 
    VALUES
    (1, 5),
    (2, 3),
    (3, 5),
    (4, 3),
    (5, 5),
    (6, 3),
    (7, 5),
    (8, 9),
    (9, 5),
    (10, 7),
    (11, 5),
    (12, 3),
    (13, 9),
    (14, 3),
    (15, 3);
    `);
  }
}

populatedb = new Populatedb();

// populatedb.createTable();
populatedb.insertValues();
