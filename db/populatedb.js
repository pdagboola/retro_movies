const pool = require("./pool");

class Populatedb {
  async createTable() {
    await pool.query(`CREATE TABLE IF NOT EXISTS movies(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255),
    year VARCHAR(255),
    rating FLOAT, 
    img_url VARCHAR(255)
    );`);

    await pool.query(`CREATE TABLE IF NOT EXISTS korean(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255),
    year VARCHAR(255),
    rating FLOAT, 
    img_url VARCHAR(255)
    );`);

    await pool.query(`CREATE TABLE IF NOT EXISTS tvseries(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255),
    year VARCHAR(255),
    rating FLOAT, 
    img_url VARCHAR(255)
    );`);

    await pool.query(`CREATE TABLE IF NOT EXISTS genre(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255),
    genre_img_url VARCHAR(255)
    );`);

    await pool.query(` CREATE TABLE IF NOT EXISTS actor(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255)
    );`);

    await pool.query(`CREATE TABLE IF NOT EXISTS movie_genre(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    movie_id INT 
        
    );`);

    await pool.query(`CREATE TABLE IF NOT EXISTS korean_genre(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    korean_id INT 
        
    );`);

    await pool.query(`CREATE TABLE IF NOT EXISTS tvseries_genre(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tvseries_id INT 
        
    );`);
  }

  async insertValues() {
    await pool.query(`INSERT INTO movies(name, year, rating, img_url)
    VALUES ()
        
        );`);
  }
}
